#!/bin/bash

# –õ–æ–≥–æ—Ç–∏–ø
echo -e '\e[32m'
echo -e '‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó '
echo -e '‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó'
echo -e '‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù'
echo -e '‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó'
echo -e '‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë'
echo -e '‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù'
echo -e '\e[0m'

echo -e "\n–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª may.crypto{ü¶Ö} —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–¥ - https://t.me/maycrypto\n"

sleep 2

while true; do
  # –ú–µ–Ω—é
  PS3='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: '
  options=("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É Morph" "–£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É Morph" "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–æ–¥—ã" "–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Telegram –ë–æ—Ç–∞" "–ü–æ–∫–∏–Ω—É—Ç—å —Å–∫—Ä–∏–ø—Ç")
  select opt in "${options[@]}"
  do
      case $opt in
          "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É Morph")
              echo "–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–¥—ã Morph..."

              # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
              echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
              sudo apt update && sudo apt upgrade -y
              sudo apt install curl git jq lz4 build-essential unzip make lz4 gcc jq ncdu tmux cmake clang pkg-config libssl-dev python3-pip protobuf-compiler bc -y

              # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GO
              echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go..."
              sudo rm -rf /usr/local/go
              curl -Ls https://go.dev/dl/go1.22.2.linux-amd64.tar.gz | sudo tar -xzf - -C /usr/local
              eval $(echo 'export PATH=$PATH:/usr/local/go/bin' | sudo tee /etc/profile.d/golang.sh)
              eval $(echo 'export PATH=$PATH:$HOME/go/bin' | tee -a $HOME/.profile)
              go version

              # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∏ Docker Compose
              echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∏ Docker Compose..."
              sudo apt install -y ca-certificates curl gnupg lsb-release
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update && sudo apt install -y docker-ce docker-ce-cli containerd.io
              sudo usermod -aG docker $USER
              newgrp docker
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose

              # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Geth
              echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Geth..."
              mkdir -p ~/.morph
              cd ~/.morph
              git clone https://github.com/morph-l2/morph.git
              cd morph
              git checkout v0.1.0-beta
              make nccc_geth
              cd ~/.morph/morph/node
              make build

              # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
              echo "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
              cd ~/.morph
              wget https://raw.githubusercontent.com/morph-l2/config-template/main/holesky/data.zip
              unzip data.zip

              # –°–æ–∑–¥–∞–Ω–∏–µ Secret Key
              echo "–°–æ–∑–¥–∞–Ω–∏–µ Secret Key..."
              cd ~/.morph
              openssl rand -hex 32 > jwt-secret.txt
              cat jwt-secret.txt

              # –ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã Geth
              echo "–ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã Geth..."
              screen -S geth -d -m ~/.morph/morph/go-ethereum/build/bin/geth --morph-holesky \
                  --datadir "./geth-data" \
                  --http --http.api=web3,debug,eth,txpool,net,engine \
                  --http.port 8546 \
                  --authrpc.addr localhost \
                  --authrpc.vhosts="localhost" \
                  --authrpc.port 8551 \
                  --authrpc.jwtsecret=./jwt-secret.txt \
                  --miner.gasprice="100000000" \
                  --log.filename=./geth.log \
                  --port 30363

              # –ó–∞–ø—É—Å–∫ Morph –Ω–æ–¥—ã
              echo "–ó–∞–ø—É—Å–∫ Morph –Ω–æ–¥—ã..."
              screen -S morph -d -m ~/.morph/morph/node/build/bin/morphnode --home ./node-data \
                  --l2.jwt-secret ./jwt-secret.txt \
                  --l2.eth http://localhost:8546 \
                  --l2.engine http://localhost:8551 \
                  --log.filename ./node.log

              echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
              break
              ;;
              
          "–£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É Morph")
              echo "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Morph..."
              sudo rm -rf ~/.morph
              sudo docker system prune -a -f
              echo "–ù–æ–¥–∞ Morph —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
              break
              ;;
              
          "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–æ–¥—ã")
              echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–æ–¥—ã..."
              curl -X POST -H 'Content-Type: application/json' --data '{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":74}' http://localhost:8546
              curl http://localhost:26657/status
              break
              ;;
              
          "–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Telegram –ë–æ—Ç–∞")
              read -p "–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –æ—Ç Telegram –ë–æ—Ç–∞: " API_KEY
              read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à User ID –≤ Telegram: " USER_ID
              read -p "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 600): " CHECK_INTERVAL
              CHECK_INTERVAL=${CHECK_INTERVAL:-600}  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 600 —Å–µ–∫—É–Ω–¥

              echo $API_KEY > ~/.morph/telegram_bot_api_key.txt
              echo $USER_ID > ~/.morph/telegram_bot_user_id.txt
              echo $CHECK_INTERVAL > ~/.morph/telegram_bot_check_interval.txt
              
              echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
              sudo apt install python3-pip -y
              pip3 install requests python-telegram-bot
              echo "–°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
              cat <<EOF > ~/.morph/node_monitor.py
import requests
import time
import json
from telegram import Bot

# –ß—Ç–µ–Ω–∏–µ API –∫–ª—é—á–∞, User ID –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
with open('~/.morph/telegram_bot_api_key.txt') as f:
    api_key = f.read().strip()

with open('~/.morph/telegram_bot_user_id.txt') as f:
    user_id = f.read().strip()

with open('~/.morph/telegram_bot_check_interval.txt') as f:
    check_interval = int(f.read().strip())

bot = Bot(token=api_key)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã
def check_node_status():
    try:
        response_geth = requests.post('http://localhost:8546', json={"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":74})
        response_morph = requests.get('http://localhost:26657/status')

        if response_geth.status_code == 200 and response_morph.status_code == 200:
            geth_data = response_geth.json()
            morph_data = response_morph.json()
            
            message = f"üü¢ –ù–æ–¥–∞ Morph —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n" \
                      f"üîó Geth Peer Count: {geth_data['result']}\n" \
                      f"üìù Morph Node Status: {json.dumps(morph_data, indent=2)}"
            bot.send_message(chat_id=user_id, text=message)
        else:
            bot.send_message(chat_id=user_id, text="üî¥ –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ–¥–æ–π Morph!")
    except Exception as e:
        bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–¥—ã: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
if __name__ == "__main__":
    notifications_enabled = True
    
    while True:
        if notifications_enabled:
            check_node_status()
        
        time.sleep(check_interval)
EOF
              chmod +x ~/.morph/node_monitor.py
              echo "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
              screen -S telegram_bot -d -m python3 ~/.morph/node_monitor.py
              echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–¥—ã —á–µ—Ä–µ–∑ Telegram –ë–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
              break
              ;;
              
          "–ü–æ–∫–∏–Ω—É—Ç—å —Å–∫—Ä–∏–ø—Ç")
              echo "–í—ã—Ö–æ–¥..."
              exit 0
              ;;
              
          *) echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";;
      esac
  done
done
